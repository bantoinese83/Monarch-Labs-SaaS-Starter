// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  passwordHash     String
  name             String
  teamId           String?
  role             String   @default("Member")
  stripeCustomerId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  team     Team?    @relation("PrimaryTeamUsers", fields: [teamId], references: [id])
  teams    TeamMember[]
  logs     ActivityLog[]
  ownedTeams Team[] @relation("TeamOwner")

  @@index([teamId])
}

model Team {
  id                   String   @id @default(cuid())
  name                 String
  ownerId              String
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?
  subscriptionStatus   String   @default("trialing")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  owner   User   @relation("TeamOwner", fields: [ownerId], references: [id])
  members TeamMember[]
  users   User[] @relation("PrimaryTeamUsers")
  logs    ActivityLog[]
  items   Item[]

  @@index([ownerId])
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   @default("Member")
  createdAt DateTime @default(now())

  // Relations
  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@index([userId])
  @@index([teamId])
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  eventType String
  details   Json
  timestamp DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@index([teamId])
  @@index([userId])
  @@index([timestamp])
}

model StripeEvent {
  id        String   @id
  createdAt DateTime @default(now())
}

model Item {
  id          String   @id @default(cuid())
  teamId      String
  name        String
  description String
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  team Team @relation(fields: [teamId], references: [id])

  @@index([teamId])
  @@index([status])
}
